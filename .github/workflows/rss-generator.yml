name: Generate AI-ENGAGE RSS Feed

on:
  schedule:
    - cron: '10 1 * * *'        # JST 10:10
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Python deps
      run: python -m pip install --upgrade requests

    - name: Build RSS via Python
      run: |
        python <<'PY'
        import requests, datetime, email.utils, html, pathlib, json, sys

        BASE_URL  = "https://www.jst.go.jp"
        JSON_URL  = f"{BASE_URL}/moonshot/ai-engage/js/newsitem_js.json"

        # --- JSON 取得（BOM を除去してパース） -------------------------------
        try:
            raw = requests.get(JSON_URL, timeout=20).content
            text = raw.decode("utf-8-sig")           # ⭐ UTF-8-BOM を吸収
            data = json.loads(text)
        except Exception as e:
            sys.exit(f"::error::JSON取得失敗: {e}")

        # --- 配列に辿り着く --------------------------------------------------
        if isinstance(data, list):
            items = data
        else:
            # dict のいずれかのキーにリストがある
            for k in ("news", "items", "values"):
                if isinstance(data.get(k), list):
                    items = data[k]
                    break
            else:
                sys.exit("::error::JSON構造に記事配列が見つかりません")

        # --- RSS 組立 -------------------------------------------------------
        out = [
            '<?xml version="1.0" encoding="UTF-8"?>',
            '<rss version="2.0"><channel>',
            '<title>AI-ENGAGE NEWS</title>',
            f'<link>{BASE_URL}/moonshot/ai-engage/news.html</link>',
            '<description>JST AI-ENGAGE の新着情報</description>',
        ]

        for itm in items[:30]:                       # 最大30件
            title = html.escape(itm.get("title", ""))
            link  = itm.get("url") or itm.get("link") or ""
            if link.startswith("/"):
                link = BASE_URL + link
            date_raw = itm.get("date") or itm.get("news_date") or ""
            try:
                dt = datetime.datetime.strptime(date_raw, "%Y/%m/%d")
            except ValueError:
                try:
                    dt = datetime.datetime.strptime(date_raw, "%Y-%m-%d")
                except ValueError:
                    dt = datetime.datetime.utcnow()
            pub = email.utils.format_datetime(dt)

            out.append(
                f"<item><title>{title}</title>"
                f"<link>{link}</link><pubDate>{pub}</pubDate></item>"
            )

        out.append("</channel></rss>")
        pathlib.Path("new_rss.xml").write_text("\n".join(out), encoding="utf-8")
        PY

    - name: Stage RSS if changed
      run: |
        if [ -f rss.xml ] && cmp -s new_rss.xml rss.xml; then
          echo "No content change"; exit 0; fi
        mv new_rss.xml rss.xml
        git add rss.xml

    - name: Commit & push
      run: |
        if git diff --cached --quiet; then
          echo "Nothing to commit"; exit 0; fi
        git config --global user.name  github-actions
        git config --global user.email github-actions@github.com
        git commit -m "Update AI-ENGAGE RSS feed"
        git push
